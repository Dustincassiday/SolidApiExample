name: Quality

on:
  push:
    branches: [main]
  pull_request:
    branches: [main, dev]

jobs:
  quality:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
    env:
      DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
      DOTNET_CLI_TELEMETRY_OPTOUT: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Install dotnet tools
        run: |
          dotnet tool install --global dotnet-sonarscanner
          echo "$HOME/.dotnet/tools" >> $GITHUB_PATH

      - name: Restore
        run: dotnet restore SolidApiExample.sln

      - name: SonarCloud - Begin Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet sonarscanner begin \
            /k:"${{ secrets.SONAR_PROJECT_KEY }}" \
            /o:"${{ secrets.SONAR_ORGANIZATION }}" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.vstest.reportsPaths="**/*.trx" \
            /d:sonar.coverageReportPaths="TestResults/coverage/coverage.cobertura.xml" \
            /d:sonar.coverage.exclusions="**/bin/**,**/obj/**"

      - name: Build
        run: dotnet build SolidApiExample.sln --configuration Release --no-restore

      - name: Test with Coverage
        run: dotnet test SolidApiExample.sln --configuration Release --no-build --results-directory TestResults --collect:"XPlat Code Coverage" --logger "trx;LogFileName=tests.trx"

      - name: Prepare Coverage Report
        run: |
          COVERAGE_FILE=$(find TestResults -name 'coverage.cobertura.xml' | head -n 1)
          if [ -z "$COVERAGE_FILE" ]; then
            echo "Coverage file not found"
            exit 1
          fi
          mkdir -p TestResults/coverage
          cp "$COVERAGE_FILE" TestResults/coverage/coverage.cobertura.xml

      - name: SonarCloud - End Analysis
        if: always()
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          PATH: $HOME/.dotnet/tools:$PATH
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      - name: Upload Coverage Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: |
            TestResults/coverage/coverage.cobertura.xml
            **/TestResults/**/*.trx
